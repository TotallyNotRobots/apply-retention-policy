name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check:
    name: Check source and configs (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - uses: bazel-contrib/setup-bazel@0.15.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows.
          repository-cache: true

      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version-file: go.mod
          check-latest: true

      - run: |
          bazel run @rules_go//go -- tool fix -diff -go=go${{ steps.setup-go.outputs.go-version }}
          bazel run //:gazelle -- fix -mode=diff

      - run: >
          bazel run @rules_go//go --
            run golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize@latest
            -test -fix -diff .
        shell: bash

      - name: Check lockfiles
        run: |
          bazel mod deps --lockfile_mode=errpr
          bazel mod tidy --lockfile_mode=error
          bazel run @rules_go//go -- mod tidy -diff

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - uses: bazel-contrib/setup-bazel@0.15.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows.
          repository-cache: true

      - name: Run tests (${{ runner.os }})
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            bazel test //...
          else
            bazel coverage --combined_report=lcov //...
            cp bazel-out/_coverage/_coverage_report.dat coverage.txt
          fi
        shell: bash

      - name: Upload coverage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        if: runner.os != 'Windows'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt
          fail_ci_if_error: true
          verbose: true

  lint:
    name: Lint (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - uses: bazel-contrib/setup-bazel@0.15.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows.
          repository-cache: true

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Print Go version
        run: go version
        shell: bash

      - name: Run linter
        run: bazel run //:golangci-lint -- run
        shell: bash

      - name: Run buildifier
        if: runner.os != 'Windows'
        run: |
          bazel run //:buildifier.check
        shell: bash
