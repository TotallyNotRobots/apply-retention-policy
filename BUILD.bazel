# The MIT License (MIT)
#
# Copyright Â© 2025 linuxdaemon <linuxdaemon.irc@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@gazelle//:def.bzl", "gazelle")
load("@rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_image_index", "oci_push")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

# gazelle:prefix github.com/TotallyNotRobots/apply-retention-policy
gazelle(name = "gazelle")

# gazelle:lang go,gofmt

# Version-independent golangci-lint target
alias(
    name = "golangci-lint",
    actual = "@golangci_lint//:golangci-lint",
    visibility = ["//visibility:public"],
)

go_library(
    name = "apply-retention-policy_lib",
    srcs = ["main.go"],
    importpath = "github.com/TotallyNotRobots/apply-retention-policy",
    visibility = ["//visibility:private"],
    deps = ["//cmd"],
)

go_binary(
    name = "apply-retention-policy",
    embed = [":apply-retention-policy_lib"],
    visibility = ["//visibility:public"],
)

# Create a tarball of the binary
pkg_tar(
    name = "binary_tar",
    srcs = [":apply-retention-policy"],
    mode = "0o755",
    package_dir = "/usr/local/bin",
)

# Create the container image for amd64
oci_image(
    name = "image_amd64",
    base = "@distroless_base",
    entrypoint = ["/usr/local/bin/apply-retention-policy"],
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    tars = [":binary_tar"],
)

# Create the container image for arm64 (only on non-Windows platforms)
config_setting(
    name = "windows",
    constraint_values = ["@platforms//os:windows"],
)

oci_image(
    name = "image_arm64",
    base = "@distroless_base",
    entrypoint = ["/usr/local/bin/apply-retention-policy"],
    target_compatible_with = select({
        ":windows": ["@platforms//:incompatible"],
        "//conditions:default": [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    }),
    tars = [":binary_tar"],
)

# Create a multi-arch image index
oci_image_index(
    name = "image",
    images = select({
        ":windows": [":image_amd64"],
        "//conditions:default": [
            ":image_amd64",
            ":image_arm64",
        ],
    }),
)

# Push target for the container image
oci_push(
    name = "push",
    image = ":image",
    repository = "ghcr.io/totallynotrobots/apply-retention-policy",
)

buildifier(
    name = "buildifier",
    lint_mode = "fix",
    mode = "fix",
)

buildifier(
    name = "buildifier.check",
    lint_mode = "warn",
    mode = "diff",
)
